[{"categories":["notes"],"contents":"Setting expectations Many static site generators exist, alongside types of hosting platforms and ways to host your site on even one platform. For clarity, I\u0026rsquo;m spelling out the broader aim of this guide:\n Broader goal: Create a blog for my Occurrence Mapper project.\n How\u0026rsquo;s that going to happen? Well, that\u0026rsquo;s the precise, technical aim of this guide:\n How we\u0026rsquo;ll achieve our broader goal: Create a Hugo website and deploy it to the GitHub Pages associated with the GitHub repository of my Occurrence Mapper project, by using the master/doc branch of my project repository as my website\u0026rsquo;s publishing source.\n Going \u0026ldquo;What?\u0026rdquo; was my experience reading the official documentation and online tutorials about setting up my humble blog. Their authors tend to assume you know things. This guide will also assume you know things, but they\u0026rsquo;re things I\u0026rsquo;ll spell out:\n You know what Git is You have a project on a GitHub repository that you want a Hugo site for You\u0026rsquo;ve read the installation guide for Hugo and have installed it into whichever directory you fancy in your computer  A guide  install hugo create a separate repository for the static site, different from your original project\u0026rsquo;s repository run the site locally on localhost:1313/occurrence-mapper-app build the static files, which should show up in public folder copy the static files to a folder called docs at the original project go to settings on your github repository for your original project and set the relevant publishing source for Pages  ","date":"2022-03-21T00:35:59+08:00","permalink":"https://tze-min.github.io/occurrence-mapper-app/posts/hugo-to-gh-pages-hosting/","section":"posts","tags":["github pages","hugo","github actions"],"title":"Hugo to Gh Pages Hosting"},{"categories":["meta","goals"],"contents":"Preamble I knew little about static site generators going in, and so thought myself a genius the first time I ran a Hugo site\u0026hellip; locally. (I take wins no matter their size.) But because I didn\u0026rsquo;t really know what I was doing except for the all-encompassing desire have a project-centric blog up and running, I ran into a lot of errors in my attempts to try out things.\nThe source of these errors came from inexperience with web development, and interestingly, how much knowledge is assumed by others when they explain or write technical guides on what you want to know. So I\u0026rsquo;m writing this post to detail what I tried, the problems I ran into, as well what else I want to do \u0026ndash; so I can look back at it next time and remember where I started from, the sorts of misonceptions, assumptions and knowledge gaps I had.\nAdventure I had a couple of overarching goals:\n Primary goal: Create a blog for this Occurrence Mapper project. Secondary goal: Learn more about static site generators.\n I just didn\u0026rsquo;t know how they were supposed to happen, not yet. But through some Googling, I did narrow them down to something more precise. Or more accurately, a path to achieve them:\n How I\u0026rsquo;ll achieve my overarching goals: Create a static website using Hugo and deploy it to the GitHub Pages associated with the GitHub repository of my Occurrence Mapper project, by using the master/doc branch of my project repository as my website\u0026rsquo;s publishing source.\n There were definitely many alternatives. But since it\u0026rsquo;s my first ever blog that isn\u0026rsquo;t WordPress, I didn\u0026rsquo;t need to stress too much about decisions like what site generator I ought to use. Jekyll, Hugo, Gatsby \u0026ndash; a learning curve existed all the same. I heard the most about the first two, so I looked up Jekyll\u0026rsquo;s official documentation, specifically their Step by Step Tutorial, and read:\n Jekyll is a Ruby gem.\n I went, \u0026ldquo;A gem what?\u0026rdquo; and looked up Hugo instead.\nHugo\u0026rsquo;s installation documentation is friendlier because the writers assumed the reader\u0026rsquo;s cluelessness \u0026ndash; they even had different instructions depending on your technical level. How considerate is that? From then on, the Quick Start guide laid down a straight path towards starting the Hugo server and looking at your site by visiting http://localhost:1313. Though I did have some fun redoing the steps upon realizing the site themes I liked required the extended version of Hugo.\nThen, I screwed up.\nThe last step, after watching your site show up in localhost, is to actually build the static pages. To call hugo -D in your command prompt/terminal, to create the html and json files that would actually display the pages of your website itself.\nNot realising \u0026ndash; and at a deeper level, not understanding \u0026ndash; this sent me on a wild goose chase trying to figure out what the tutorials I found online were saying. It included trying out things like:\nAssuming the Hugo site folder (i.e. the config.toml file, themes, content, resources folders, etc. \u0026ndash; those generated when you ran hugo new site [mywebsite]) ought to go into a folder called docs of your project repository. And committing all that into my project repository. Yikes.\nAdding publishDir = 'docs' to the config.toml file and wondering what on earth that was supposed to achieve.\nWondering why when accessing this website\u0026rsquo;s URL led to 404 Not Found, which horrified me. And why inspecting the webpage\u0026rsquo;s console gave me errors, variations of Access to xxx from origin yyy has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource, which horrified me just a tad more. But I did learn what a CORS error meant, which contributed to my eventual realization regarding where I\u0026rsquo;d gone wrong.\nLooking around for index.html files among my site development files that the Internet told me were vital to any website and that also didn\u0026rsquo;t exist in my directory. Of course they didn\u0026rsquo;t. I hadn\u0026rsquo;t run the command to generate them.\nAlas, returning to and noticing the final line of Hugo\u0026rsquo;s Quick Start tutorial saved me from another half a day\u0026rsquo;s work. I moved my Hugo website folder out of docs, ran hugo with anticipation, and copied over the static files into aforementioned docs, committed and pushed the changes, and gawked at my first ever static site available, prettily, on github.io.\nSummary and what else I intend to try This probably could\u0026rsquo;ve been avoided if I\u0026rsquo;d just examined the documentation carefully. At the same time though, it wasn\u0026rsquo;t as if it were the first time I\u0026rsquo;d come across that command. I\u0026rsquo;d seen it at times, on other tutorials, but I hadn\u0026rsquo;t understood what that meant or what I was meant to do with the files that got published by it. But hey, I know it now, and more importantly \u0026ndash; I achieved my primary and secondary goals using the roadmap I set out.\nRegarding what else I intend to do:\nI hear GitHub Actions is the way to go for removing the manual need to copy-paste your generated static files into the docs folder every single time. I\u0026rsquo;ve started reading up on it and it looks exciting.\nFiguring out where the folder for your Hugo site supposed to go is also on the list. Within this Occurrence Mapper project repository? In a new repository?\nFor future sites hosted on GitHub Pages, try using the gh-pages branch, an alternative to placing your static files in docs. Might look into Jekyll, too, since that\u0026rsquo;s what GitHub Pages is built on. I\u0026rsquo;d just like to have a more confident grasp of the workflow of deploying Hugo sites to GitHub Pages first. Perhaps only after, I\u0026rsquo;d look into tweaking the script of the themes I use, using other site generators, or trying out other hosting platforms.\nThe first two tasks are pretty clear-cut. I\u0026rsquo;ll determine them as complete once I\u0026rsquo;ve gotten sufficient knowledge to do up an overview of the steps of this aforementioned workflow \u0026ndash; whether as a diagram or via writing \u0026ndash; in a blog post. I noticed a lot of the official documentation and online tutorials I\u0026rsquo;ve come across about this tend to\n Assume the reader\u0026rsquo;s prior knowledge (e.g. how a website works), which isn\u0026rsquo;t the friendliest writing. Break up the website creation and deployment in parts, instead of taking the reader from beginning (e.g. downloading Hugo) to end (e.g. GitHub Actions). Focus on deploying sites for user\u0026rsquo;s or organisation\u0026rsquo;s GitHub Pages instead of for projects, and also focus on sites built with Jekyll.  I\u0026rsquo;d like to make something I can return to or send to my less technical friends as references should they ever wish to do this, too.\n","date":"2022-03-20T09:00:43+08:00","permalink":"https://tze-min.github.io/occurrence-mapper-app/posts/deploying-to-gh-pages-was-an-adventure/","section":"posts","tags":["github pages","hugo"],"title":"Deploying to GitHub Pages was an adventure"},{"categories":["meta","goals"],"contents":"Origin A research lab I interned for in 2021 wanted to study the distribution of insect species in Singapore, given some occurrence datasets.1\nOriginally, I wrote a script to create interactive maps, because I wasn\u0026rsquo;t happy with static ones. Displaying the occurrence data of more than one species, genus, or other higher levels of taxonomy complicated the maps; we couldn\u0026rsquo;t tell the difference between the data points of multiple taxonomy groups. And manually generating a map per group? No.\nBut Leaflet, an R package for developing interactive maps, let me do fun things like toggle between species, produce tooltips with additional information about each data point by hovering over it, and zoom into exactly what sort of habitat a specific organism was observed at.\nHowever, I\u0026rsquo;d also been asked to visualise other fields the data had. Who were the top recorders over time? Which families and orders of species had the greatest number of observations? And what about the dataset itself: how many missing values? How much more data \u0026ndash; i.e. recording observations via field trips \u0026ndash; do we need to collect before we can say, \u0026ldquo;Okay, this dataset fairly represents the species available in this area of study?\u0026rdquo;\nSo I proposed this dashboard app written in Shiny that provides both interactive maps and summary statistics, and because prior to that I\u0026rsquo;ve never coded out an app (by my lonesome) in my life, proceeded to spend the rest of my internship working on it.\nWhy work on it again? I\u0026rsquo;ve interning elsewhere now, six months later, worlds away from academia and biodiversity labs. But I look back at the time I spent exploring packages and studying how reactivity worked in Shiny and worrying hair ends about why the pickers on my maps weren\u0026rsquo;t working the exact way I wanted them to \u0026ndash; I thought:\n Wow I had fun! I can still make a lot of improvements \u0026ndash; and test out ideas  I don\u0026rsquo;t necessarily have to look at wildlife within Singapore. Databases like GBIF exist out there that I\u0026rsquo;ve barely touched, and I want to see what insights they can give me. What have people been doing with species occurrence data? Surely more than putting them into maps. And plotting individual points like these in the app works well when the data displayed per species is sparse, but what about when there\u0026rsquo;s plenty? What about when you want to bring in environmental factors \u0026ndash; how could that look and fit into an app?\nNot to mention the bugs. And making the app\u0026rsquo;s features more convenient, if not for others, then at least for myself. One of the biggest things I took away from my internship at the lab was to take pride in my own work, and yeah, sometimes I wonder if building a dashboard app is something others in my faculty (computing) find simple, but I still remember the process of doing so, of learning through encountering bug by frustrating bug, of watching the product of your work fill out, take shape.\nI\u0026rsquo;d like to keep a long-term project of experiencing this again.\nMy long-term goals 1. Test out my ideas I\u0026rsquo;ve been brainstorming them here, and will probably continue doing so. I\u0026rsquo;d consider this a success if I\u0026rsquo;ve given at least each item in the kanban board a go.\n2. Practice blogging and documenting Because how else am I going to remember what I\u0026rsquo;ve done? Besides, I like writing. I\u0026rsquo;ve just never done it publicly for a coding project before. (I also like biodiversity and the environment. Intersecting writing x programming x environmental studies for a career or a hobby would literally be the biggest win.)\nI\u0026rsquo;d consider this goal a success if I can turn to my previous posts to recall what I\u0026rsquo;ve learned, say, another six months down the road. No need to be too consistent with posting since I need to prioritise my other commitments, but I want my posts over time to be a reflection of how I\u0026rsquo;ve grown.\nSo, two big things \u0026hellip;that I\u0026rsquo;m aiming for. But in setting up this project site and writing this post, I\u0026rsquo;ve already tested out a couple of ideas, learned more about GitHub Pages and how hosting Hugo sites work, and started my blogging practice. That\u0026rsquo;s more than where I\u0026rsquo;d been at before.\n  We can think of occurrence data as rows of observations of organisms, each with the organism\u0026rsquo;s scientific name, coordinates and datetime the recorder observed it, at the very least.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2022-03-18T18:33:02+08:00","permalink":"https://tze-min.github.io/occurrence-mapper-app/posts/how-this-project-came-about/","section":"posts","tags":["ideas"],"title":"How this project came about"}]